To store transaction details in MongoDB Atlas and then render the transaction history in your dashboard, you will need to:

1. **Setup MongoDB Atlas** and create a database and collection for storing transactions.
2. **Connect to MongoDB Atlas** from your application using an appropriate MongoDB client like `mongoose` or the native MongoDB driver.
3. **Capture transaction details** when the ETH transfer is initiated and store them in MongoDB.
4. **Query MongoDB** to fetch and display the transaction history in the dashboard.

Here's a guide on how to achieve this:

### 1. Set up MongoDB Atlas

- Go to [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) and create a cluster.
- Create a database (e.g., `transactionDB`) and a collection (e.g., `transactions`).
- Obtain the connection string (youâ€™ll use it in your backend to connect to MongoDB Atlas).

### 2. Install Required Packages

Install the MongoDB driver or `mongoose`:

```bash
npm install mongoose
```

### 3. Connect to MongoDB Atlas

In your backend, create a connection to MongoDB. Create a file `db.js` and write the following code:

```javascript
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected');
  } catch (error) {
    console.error('Error connecting to MongoDB', error);
    process.exit(1);
  }
};

module.exports = connectDB;
```

- Use `.env` to store your MongoDB URI. Create a `.env` file:

```bash
MONGO_URI=mongodb+srv://<username>:<password>@cluster0.mongodb.net/transactionDB?retryWrites=true&w=majority
```

- In your main server file (`app.js` or `index.js`), connect to MongoDB:

```javascript
const express = require('express');
const connectDB = require('./db');
const app = express();

// Connect to MongoDB
connectDB();

// Middleware for JSON parsing
app.use(express.json());

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
```

### 4. Define a Transaction Model

Create a model for your transaction using `mongoose`. In a file `models/Transaction.js`, define the schema:

```javascript
const mongoose = require('mongoose');

const transactionSchema = new mongoose.Schema({
  sender: { type: String, required: true },
  receiver: { type: String, required: true },
  amount: { type: String, required: true },
  transactionHash: { type: String, required: true },
  timestamp: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Transaction', transactionSchema);
```

### 5. Store Transaction Details in MongoDB

In your `WithdrawCrypto.jsx`, modify the `send` function to store the transaction details after the ETH is sent:

```javascript
import axios from 'axios';

export const sendTransaction = async (receiverAddress, ethAmount, sender) => {
  const web3 = getWeb3Instance();
  const amountInWei = web3.utils.toWei(ethAmount, "ether");

  try {
    const transaction = await web3.eth.sendTransaction({
      from: sender,
      to: receiverAddress,
      value: amountInWei,
    });

    // If successful, store transaction details in MongoDB
    const transactionDetails = {
      sender: transaction.from,
      receiver: transaction.to,
      amount: ethAmount,
      transactionHash: transaction.transactionHash,
      timestamp: new Date(transaction.timestamp * 1000),
    };

    await axios.post('/api/transaction', transactionDetails);

    return {
      status: "success",
      message: "Transaction successful",
      transactionDetails,
    };
  } catch (error) {
    return {
      status: "error",
      message: error.message || "Transaction failed",
    };
  }
};
```

Then, create an API route in your backend to save the transaction details to MongoDB. For example, in `routes/transactionRoutes.js`:

```javascript
const express = require('express');
const router = express.Router();
const Transaction = require('../models/Transaction');

// POST route to store transaction details
router.post('/transaction', async (req, res) => {
  const { sender, receiver, amount, transactionHash, timestamp } = req.body;

  try {
    const newTransaction = new Transaction({
      sender,
      receiver,
      amount,
      transactionHash,
      timestamp,
    });

    await newTransaction.save();
    res.status(201).json({ success: true, message: "Transaction saved" });
  } catch (error) {
    res.status(500).json({ success: false, message: "Error saving transaction" });
  }
});

module.exports = router;
```

And in `app.js`, include the transaction routes:

```javascript
const transactionRoutes = require('./routes/transactionRoutes');
app.use('/api', transactionRoutes);
```

### 6. Display Transaction History in the Dashboard

Create a route in your backend to fetch the transaction history for the connected account. In `routes/transactionRoutes.js`:

```javascript
// GET route to fetch transaction history
router.get('/transaction/:account', async (req, res) => {
  const account = req.params.account;

  try {
    const transactions = await Transaction.find({ sender: account });
    res.status(200).json({ success: true, transactions });
  } catch (error) {
    res.status(500).json({ success: false, message: "Error fetching transactions" });
  }
});
```

Now in your React dashboard component, fetch the transaction history and display it:

```javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const TransactionHistory = ({ account }) => {
  const [transactions, setTransactions] = useState([]);

  useEffect(() => {
    const fetchTransactions = async () => {
      try {
        const response = await axios.get(`/api/transaction/${account}`);
        setTransactions(response.data.transactions);
      } catch (error) {
        console.error("Error fetching transactions", error);
      }
    };

    fetchTransactions();
  }, [account]);

  return (
    <div>
      <h2>Transaction History</h2>
      <ul>
        {transactions.map((tx, index) => (
          <li key={index}>
            <p>Sender: {tx.sender}</p>
            <p>Receiver: {tx.receiver}</p>
            <p>Amount: {tx.amount} ETH</p>
            <p>Transaction Hash: {tx.transactionHash}</p>
            <p>Date: {new Date(tx.timestamp).toLocaleString()}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TransactionHistory;
```

### Summary of Steps:

1. Set up MongoDB Atlas and connect it to your backend.
2. Create a transaction schema and model in Mongoose.
3. Capture transaction details when sending ETH and store them in MongoDB.
4. Fetch the transaction history for the connected wallet and display it on the dashboard.

This setup will allow users to see their transaction history on your app, fetched from MongoDB Atlas.