To store each transaction as the "Send ETH" button is pressed and render the transaction details on the dashboard for the connected wallet address, you'll need to set up a database and connect your frontend to it. This process involves creating a backend service to store the transaction details and a frontend dashboard to fetch and display the data for the connected wallet.

### Here's a step-by-step guide:

### 1. **Set Up a MongoDB Database (for Transaction Storage)**

We'll use **MongoDB** as an example to store the transaction data. If you prefer a different database like MySQL, I can guide you with that as well.

#### Step 1: Install MongoDB Locally or Use MongoDB Atlas (cloud-based)
- If you want to use **MongoDB locally**, follow [MongoDB installation instructions](https://docs.mongodb.com/manual/installation/).
- If you want to use **MongoDB Atlas**, create an account [here](https://www.mongodb.com/cloud/atlas) and set up a cluster.

#### Step 2: Set Up Node.js Backend to Store Transactions

1. **Install Dependencies:**
   Create a **backend** folder for your project and install the necessary packages:
   
   ```bash
   mkdir backend
   cd backend
   npm init -y
   npm install express mongoose cors body-parser
   ```

2. **Create a Schema for Transactions**:
   You need a schema that defines how the transaction data will be stored in MongoDB.

   ```javascript
   // models/Transaction.js
   const mongoose = require('mongoose');

   const transactionSchema = new mongoose.Schema({
     timestamp: { type: Date, default: Date.now },
     amount: String,
     transactionHash: String,
     sender: String,
     receiver: String,
   });

   module.exports = mongoose.model('Transaction', transactionSchema);
   ```

3. **Create Express Server**:
   This will handle transaction storage when the frontend sends data.

   ```javascript
   // server.js
   const express = require('express');
   const mongoose = require('mongoose');
   const bodyParser = require('body-parser');
   const cors = require('cors');
   const Transaction = require('./models/Transaction');

   const app = express();
   app.use(bodyParser.json());
   app.use(cors());

   // MongoDB connection
   mongoose.connect('mongodb://localhost:27017/transactionsDB', {
     useNewUrlParser: true,
     useUnifiedTopology: true,
   }).then(() => {
     console.log('Connected to MongoDB');
   }).catch((error) => {
     console.error('MongoDB connection error:', error);
   });

   // Save transaction route
   app.post('/transaction', async (req, res) => {
     const { amount, transactionHash, sender, receiver } = req.body;

     const newTransaction = new Transaction({
       amount,
       transactionHash,
       sender,
       receiver,
     });

     try {
       await newTransaction.save();
       res.status(201).json({ message: 'Transaction saved' });
     } catch (error) {
       res.status(500).json({ error: 'Failed to save transaction' });
     }
   });

   // Fetch transactions by address
   app.get('/transactions/:address', async (req, res) => {
     const address = req.params.address;
     try {
       const transactions = await Transaction.find({ sender: address });
       res.status(200).json(transactions);
     } catch (error) {
       res.status(500).json({ error: 'Failed to fetch transactions' });
     }
   });

   const port = 5000;
   app.listen(port, () => {
     console.log(`Server running on port ${port}`);
   });
   ```

4. **Start the Backend**:

   Start the backend server by running:

   ```bash
   node server.js
   ```

This sets up the backend that will store transaction data and fetch it based on the user's wallet address.

### 2. **Integrate with Frontend (Vite)**
Once the backend is ready, we can modify the frontend to:
1. Send the transaction data after pressing the "Send ETH" button.
2. Fetch the transaction history and display it on the connected user's dashboard.

#### Step 1: Capture and Send Transaction Data
In the Vite project, after the transaction is successful, you will send the transaction details to the backend.

```javascript
import React, { useState } from 'react';
import web3 from '../utils/web3';
import runeToEthBridge from '../utils/runeToEthBridge';
import axios from 'axios';

const Dashboard = () => {
  const [account, setAccount] = useState(null);
  const [amount, setAmount] = useState('');
  const [transactions, setTransactions] = useState([]);

  // Connect MetaMask wallet
  const connectMetaMask = async () => {
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    setAccount(accounts[0]);
  };

  // Send ETH and store transaction details
  const sendEth = async () => {
    if (!account) {
      alert('Please connect your wallet first');
      return;
    }

    const ethValue = web3.utils.toWei(amount, 'ether');
    try {
      const transaction = await runeToEthBridge.methods.depositETH().send({
        from: account,
        value: ethValue,
      });

      alert('Transaction successful!');

      // Send transaction data to backend
      const transactionData = {
        amount: web3.utils.fromWei(ethValue, 'ether'),
        transactionHash: transaction.transactionHash,
        sender: account,
        receiver: runeToEthBridge.options.address, // contract address
      };

      await axios.post('http://localhost:5000/transaction', transactionData);

      fetchTransactions(); // Refresh transaction history
    } catch (error) {
      console.error('Transaction failed:', error);
    }
  };

  // Fetch transaction history for the connected account
  const fetchTransactions = async () => {
    if (!account) {
      alert('Please connect your wallet to view transactions');
      return;
    }

    try {
      const response = await axios.get(`http://localhost:5000/transactions/${account}`);
      setTransactions(response.data);
    } catch (error) {
      console.error('Failed to fetch transactions:', error);
    }
  };

  return (
    <div>
      <h2>Dashboard</h2>
      <button onClick={connectMetaMask}>Connect MetaMask</button>
      {account && <p>Connected Wallet: {account}</p>}

      <input
        type="text"
        placeholder="Amount in ETH"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        disabled={!account}
      />
      <button onClick={sendEth} disabled={!account}>Send ETH</button>

      <div>
        <h3>Transaction History</h3>
        {transactions.length > 0 ? (
          <ul>
            {transactions.map((tx, index) => (
              <li key={index}>
                <p>Amount: {tx.amount} ETH</p>
                <p>Transaction Hash: {tx.transactionHash}</p>
                <p>Receiver: {tx.receiver}</p>
                <p>Timestamp: {new Date(tx.timestamp).toLocaleString()}</p>
              </li>
            ))}
          </ul>
        ) : (
          <p>No transactions found</p>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
```

### Step 2: Display the Transaction History
Once connected, after the "Send ETH" transaction is made, the transactions will be stored in MongoDB. The `fetchTransactions` function will retrieve all transactions for the connected account and display them.

### 3. **Running the Full App**
1. **Start the backend**: Run the backend Node.js server using:
   ```bash
   node server.js
   ```

2. **Start the frontend**: Run your Vite app.

When the user connects their MetaMask wallet, sends ETH, the transaction will be logged in the database, and the dashboard will display the transaction details (amount, transaction hash, sender, receiver, and timestamp).

### Optional: Deploy Your MongoDB Database
If you use MongoDB Atlas, make sure to replace the MongoDB connection string in the `server.js` file with the MongoDB Atlas URI.